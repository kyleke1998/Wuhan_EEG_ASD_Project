metadata$sex = as.factor(metadata$sex)
metadata$exp_group = as.factor(metadata$exp_group)
metadata$subject_id = as.integer(metadata$subject_id)
#metadata$trt = ifelse(metadata$CARS_Categorical == 'No ASD',0,1)
metadata$trt = ifelse(metadata$exp_group == 'No ASD',0,1)
setwd("C:/Users/kylek/Dropbox (Partners HealthCare)/eeg_asd_project/Code/modeling_and_analysis")
# Loading in feature set of spectral power features as proof of concept     ######
all_features = read.csv("../../features/all_features.csv")
proof_of_concept_joined = metadata %>% select(c(sex,age_months,file_name,trt,EOEC)) %>%
inner_join(y=all_features,by='file_name',keep=F)
# turning alpha presence into binary
proof_of_concept_joined$alpha_presence = ifelse(proof_of_concept_joined$alpha_presence == 'True',1,0)
fullmatch.out <- matchit(
trt ~ age_months + sex + EOEC,
data = proof_of_concept_joined,
method = "full",
distance = ps,
estimand = "ATE"
)
matched.data <- match.data(fullmatch.out)
summary(lm(log(beta_coh_P4_F3/(1-beta_coh_P4_F3)) ~ trt + EOEC + sex + age_months, data = matched.data), weights = weights)
association <- function(phenotype="bp_delta_Fp1", exposure="trt", covariates=c("sex", "age_months","EOEC"), data=proof_of_concept_joined, coh_mod_choice = 'logit') {
# phenotype: a string that is a phenotype name
# exposure: a string this is a exposure name
# covariates: an array of covariate variables
# create outcome model: phenotype ~ trt + sex + age_months + EOEC
covariate_string <- paste(covariates, collapse="+")
if (phenotype != "alpha_presence") {
# check if outcome is spectral coherence
if (grepl("coh", phenotype) | grepl("bp", phenotype)) {
# chose to model using beta regression
if (coh_mod_choice == 'beta'){
print('beta')
mod_string <- sprintf('%s ~ %s + %s', phenotype, exposure, covariate_string)
mod <- betareg(as.formula(mod_string), data = data, weights = data$weights)
}
# chose to model using logit transformation
if (coh_mod_choice == 'logit') {
print('logit')
mod_string <- sprintf('log(%s/(1-%s)) ~ %s + %s', phenotype, phenotype, exposure, covariate_string)
mod <- lm(as.formula(mod_string), data = data,weights = data$weights)
}
}
else if (grepl("sample", phenotype) | grepl("sd_", phenotype) | grepl("kurt_", phenotype)){
print('log outcome')
mod_string <- sprintf('log(%s) ~ %s + %s', phenotype, exposure, covariate_string)
mod <- lm(as.formula(mod_string),data = data,weights = data$weights)
}
# if other features that is not spectral coherence, relative power, or sample entropy
else {
print('regular regression')
mod_string <- sprintf('%s ~ %s + %s', phenotype, exposure, covariate_string)
mod <- lm(as.formula(mod_string),data = data,weights = data$weights)
}
# the above formats formula as a string
}
else{
print('Logistic regression')
mod_string <- sprintf('%s ~ %s + %s', phenotype, exposure, covariate_string)
# the above formats formula as a string
mod <- glm(as.formula(mod_string), data = data, family = "binomial",weights = data$weights)
}
return(mod)
}
View(matched.data)
# feature list
feature_list = colnames(proof_of_concept_joined[, -which(names(proof_of_concept_joined) %in%
c("subject_x","subject_y","sex","age_months","EOEC","file_name","trt","index_x","index_y","exp_group","weights","ps","exposure","CARS_Categorical","index","subject",
'numerator','denominator','sw_weights','subclass','distance'))])
# Create empty list that holds all models
list_of_fits <- list()
## Running through all phenotypes
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=matched.data, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- proof_of_concept_joined %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
all_fits = bind_rows(list_of_fits) %>% filter(term== 'trt')
bonferroni_pvalues <- p.adjust(all_fits$p.value, method = "bonferroni")
all_fits$bonf_p.value <- bonferroni_pvalues
fdr_adjusted_pvalues <- p.adjust(all_fits$p.value, method = "fdr")
all_fits$q.value <- fdr_adjusted_pvalues
View(all_fits)
fullmatch.out
# sort the data frame by the q-value column in ascending order
top_fits_cars_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
# sort the data frame by the q-value column in ascending order
top_fits_cars_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
rm(top_fits_cars_categorical_beta)
rm(top_fits_cars_categorical_logit)
rm(top_fits_cars_exp_group_logit)
rm(top_fits_cars_exp_group_logit_optimal_full_match)
# sort the data frame by the q-value column in ascending order
top_fits_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
View(top_fits_exp_group_logit_optimal_full_match)
fit1 = lm(log(theta_coh_Cz_Fp1 / (1-theta_coh_Cz_Fp1)) ~ trt + EOEC + sex + age_months,data = matched.data)
fit1 = lm(log(theta_coh_Cz_Fp1 / (1-theta_coh_Cz_Fp1)) ~ trt + EOEC + sex + age_months,data = matched.data, weights = weights)
avg_predictions(fit1, variables = "trt",
vcov = ~subclass,
wts = "weights",
by = "A")
install.packages("marginaleffects")
library("marginaleffects")
avg_predictions(fit1, variables = "trt",
vcov = ~subclass,
wts = "weights",
by = "A")
avg_predictions(fit1, variables = "trt",
vcov = ~subclass,
wts = "weights",
by = "trt")
View(top_fits_exp_group_logit_optimal_full_match)
summary(fit1)
summary(fullmatch.out)
test_avg_pred = avg_predictions(fit1, variables = "trt",
vcov = ~subclass,
wts = "weights",
by = "trt")
test_avg_pred$p.value
summary(fullmatch.out)
sum(matched.data$weights)
ps.logit <- glm(trt ~ age_months + sex + EOEC,
data = proof_of_concept_joined,family='binomial')
proof_of_concept_joined$ps <- predict(ps.logit,type='response')
proof_of_concept_joined$weights <- ifelse(proof_of_concept_joined$trt == 1, 1/proof_of_concept_joined$ps,
1/(1-proof_of_concept_joined$ps))
sum(proof_of_concept_joined$weights)
proof_of_concept_joined$denominator <- ifelse(proof_of_concept_joined$trt == 1, proof_of_concept_joined$ps,
(1-proof_of_concept_joined$ps))
proof_of_concept_joined$numerator <-  ifelse(proof_of_concept_joined$trt == 1, mean(proof_of_concept_joined$trt == 1),
mean(proof_of_concept_joined$trt == 0))
proof_of_concept_joined$sw_weights <- proof_of_concept_joined$numerator / proof_of_concept_joined$denominator
sum(proof_of_concept_joined$sw_weights)
avg_predictions(fit1, variables = "trt",
vcov = ~subclass,
wts = "weights",
by = "trt")
summary(fullmatch.out) # balanced
avg_predictions(fit1, variables = "trt",
vcov = ~subclass,
wts = "weights",
by = "trt")
summary(fit1)
metadata = read.csv("C:/Users/kylek/Dropbox (Partners HealthCare)/eeg_asd_project/eeg_data/wuhan_study_clinical_data.csv")
metadata = metadata %>% filter(((EOEC=='EO') | (EOEC=='EC')) & ((exp_group=='ASD') | (exp_group=='No ASD')))
metadata$EOEC = as.factor(metadata$EOEC)
metadata$sex = as.factor(metadata$sex)
metadata$exp_group = as.factor(metadata$exp_group)
metadata$subject_id = as.integer(metadata$subject_id)
#metadata$trt = ifelse(metadata$CARS_Categorical == 'No ASD',0,1)
metadata$trt = ifelse(metadata$exp_group == 'No ASD',0,1)
setwd("C:/Users/kylek/Dropbox (Partners HealthCare)/eeg_asd_project/Code/modeling_and_analysis")
# Loading in feature set of spectral power features as proof of concept     ######
all_features = read.csv("../../features/all_features.csv")
proof_of_concept_joined = metadata %>% select(c(sex,age_months,file_name,trt,EOEC)) %>%
inner_join(y=all_features,by='file_name',keep=F)
# turning alpha presence into binary
proof_of_concept_joined$alpha_presence = ifelse(proof_of_concept_joined$alpha_presence == 'True',1,0)
rm(all_features)
library(betareg)
association <- function(phenotype="bp_delta_Fp1", exposure="trt", covariates=c("sex", "age_months","EOEC"), data=matched.data, coh_mod_choice = 'logit') {
# phenotype: a string that is a phenotype name
# exposure: a string this is a exposure name
# covariates: an array of covariate variables
# create outcome model: phenotype ~ trt + sex + age_months + EOEC
covariate_string <- paste(covariates, collapse="+")
if (phenotype != "alpha_presence") {
# check if outcome is spectral coherence
if (grepl("coh", phenotype) | grepl("bp", phenotype)) {
# chose to model using beta regression
if (coh_mod_choice == 'beta'){
print('beta')
mod_string <- sprintf('%s ~ %s + %s', phenotype, exposure, covariate_string)
mod <- betareg(as.formula(mod_string), data = data, weights = data$weights)
}
# chose to model using logit transformation
if (coh_mod_choice == 'logit') {
print('logit')
mod_string <- sprintf('log(%s/(1-%s)) ~ %s + %s', phenotype, phenotype, exposure, covariate_string)
mod <- lm(as.formula(mod_string), data = data,weights = data$weights)
}
}
else if (grepl("sample", phenotype) | grepl("sd_", phenotype) | grepl("kurt_", phenotype)){
print('log outcome')
mod_string <- sprintf('log(%s) ~ %s + %s', phenotype, exposure, covariate_string)
mod <- lm(as.formula(mod_string),data = data,weights = data$weights)
}
# if other features that is not spectral coherence, relative power, or sample entropy
else {
print('regular regression')
mod_string <- sprintf('%s ~ %s + %s', phenotype, exposure, covariate_string)
mod <- lm(as.formula(mod_string),data = data,weights = data$weights)
}
# the above formats formula as a string
}
else{
print('Logistic regression')
mod_string <- sprintf('%s ~ %s + %s', phenotype, exposure, covariate_string)
# the above formats formula as a string
mod <- glm(as.formula(mod_string), data = data, family = "binomial",weights = data$weights)
}
return(mod)
}
# feature list
feature_list = colnames(proof_of_concept_joined[, -which(names(proof_of_concept_joined) %in%
c("subject_x","subject_y","sex","age_months","EOEC","file_name","trt","index_x","index_y","exp_group","weights","ps","exposure","CARS_Categorical","index","subject",
'numerator','denominator','sw_weights','subclass','distance'))])
# Create empty list that holds all models
list_of_fits <- list()
## Running through all phenotypes
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=matched.data, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- proof_of_concept_joined %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
all_fits = bind_rows(list_of_fits) %>% filter(term== 'trt')
bonferroni_pvalues <- p.adjust(all_fits$p.value, method = "bonferroni")
all_fits$bonf_p.value <- bonferroni_pvalues
fdr_adjusted_pvalues <- p.adjust(all_fits$p.value, method = "fdr")
all_fits$q.value <- fdr_adjusted_pvalues
# sort the data frame by the q-value column in ascending order
top_fits_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
View(top_fits_exp_group_logit_optimal_full_match)
matched.data$weights
proof_of_concept_joined$denominator <- ifelse(proof_of_concept_joined$trt == 1, proof_of_concept_joined$ps,
(1-proof_of_concept_joined$ps))
ps.logit <- glm(trt ~ age_months + sex + EOEC,
data = proof_of_concept_joined,family='binomial')
proof_of_concept_joined$ps <- predict(ps.logit,type='response')
proof_of_concept_joined$weights <- ifelse(proof_of_concept_joined$trt == 1, 1/proof_of_concept_joined$ps,
1/(1-proof_of_concept_joined$ps))
proof_of_concept_joined$denominator <- ifelse(proof_of_concept_joined$trt == 1, proof_of_concept_joined$ps,
(1-proof_of_concept_joined$ps))
proof_of_concept_joined$numerator <-  ifelse(proof_of_concept_joined$trt == 1, mean(proof_of_concept_joined$trt == 1),
mean(proof_of_concept_joined$trt == 0))
proof_of_concept_joined$sw_weights <- proof_of_concept_joined$numerator / proof_of_concept_joined$denominator
matched.data$weights
proof_of_concept_joined$sw_weights
metadata = read.csv("C:/Users/kylek/Dropbox (Partners HealthCare)/eeg_asd_project/eeg_data/wuhan_study_clinical_data.csv")
metadata = metadata %>% filter(((EOEC=='EO') | (EOEC=='EC')) & ((exp_group=='ASD') | (exp_group=='No ASD')))
metadata$EOEC = as.factor(metadata$EOEC)
metadata$sex = as.factor(metadata$sex)
metadata$exp_group = as.factor(metadata$exp_group)
metadata$subject_id = as.integer(metadata$subject_id)
#metadata$trt = ifelse(metadata$CARS_Categorical == 'No ASD',0,1)
metadata$trt = ifelse(metadata$exp_group == 'No ASD',0,1)
setwd("C:/Users/kylek/Dropbox (Partners HealthCare)/eeg_asd_project/Code/modeling_and_analysis")
# Loading in feature set of spectral power features as proof of concept     ######
all_features = read.csv("../../features/all_features.csv")
proof_of_concept_joined = metadata %>% select(c(sex,age_months,file_name,trt,EOEC)) %>%
inner_join(y=all_features,by='file_name',keep=F)
# turning alpha presence into binary
proof_of_concept_joined$alpha_presence = ifelse(proof_of_concept_joined$alpha_presence == 'True',1,0)
rm(all_features)
eoec_0_data <- subset(proof_of_concept_joined, EOEC == 0)
eoec_1_data <- subset(proof_of_concept_joined, EOEC == 1)
# Perform matching on EOEC = 0 data
eoec_0_match.out <- matchit(
trt ~ age_months + sex,
data = eoec_0_data,
method = "full",
distance = ps,
estimand = "ATE"
)
eoec_0_data <- subset(proof_of_concept_joined, EOEC == 'EC')
eoec_1_data <- subset(proof_of_concept_joined, EOEC == 'EO')
# Perform matching on EOEC = 0 data
eoec_0_match.out <- matchit(
trt ~ age_months + sex,
data = eoec_0_data,
method = "full",
distance = ps,
estimand = "ATE"
)
ps
fullmatch.out <- matchit(
trt ~ age_months + sex + EOEC,
data = proof_of_concept_joined,
method = "full", # optimal full match
distance = 'glm',
estimand = "ATE"
)
summary(fullmatch.out) # balanced
# feature list
feature_list = colnames(proof_of_concept_joined[, -which(names(proof_of_concept_joined) %in%
c("subject_x","subject_y","sex","age_months","EOEC","file_name","trt","index_x","index_y","exp_group","weights","ps","exposure","CARS_Categorical","index","subject",
'numerator','denominator','sw_weights','subclass','distance'))])
# Create empty list that holds all models
list_of_fits <- list()
## Running through all phenotypes
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=matched.data, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- proof_of_concept_joined %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
all_fits = bind_rows(list_of_fits) %>% filter(term== 'trt')
bonferroni_pvalues <- p.adjust(all_fits$p.value, method = "bonferroni")
all_fits$bonf_p.value <- bonferroni_pvalues
fdr_adjusted_pvalues <- p.adjust(all_fits$p.value, method = "fdr")
all_fits$q.value <- fdr_adjusted_pvalues
# sort the data frame by the q-value column in ascending order
top_fits_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
fullmatch.out <- matchit(
trt ~ age_months + sex + EOEC,
data = proof_of_concept_joined,
method = "full", # optimal full match
distance = 'glm',
estimand = "ATE"
)
summary(fullmatch.out) # balanced
matched.data <- match.data(fullmatch.out)
# Create empty list that holds all models
list_of_fits <- list()
## Running through all phenotypes
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=matched.data, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- proof_of_concept_joined %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
all_fits = bind_rows(list_of_fits) %>% filter(term== 'trt')
bonferroni_pvalues <- p.adjust(all_fits$p.value, method = "bonferroni")
all_fits$bonf_p.value <- bonferroni_pvalues
fdr_adjusted_pvalues <- p.adjust(all_fits$p.value, method = "fdr")
all_fits$q.value <- fdr_adjusted_pvalues
# sort the data frame by the q-value column in ascending order
top_fits_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
View(top_fits_exp_group_logit_optimal_full_match)
eoec_0_data <- subset(proof_of_concept_joined, EOEC == 'EC')
eoec_1_data <- subset(proof_of_concept_joined, EOEC == 'EO')
# Perform matching on EOEC = 0 data
eoec_0_match.out <- matchit(
trt ~ age_months + sex,
data = eoec_0_data,
method = "full",
distance = ps,
estimand = "ATE"
)
eoec_0_data <- subset(proof_of_concept_joined, EOEC == 'EC')
eoec_1_data <- subset(proof_of_concept_joined, EOEC == 'EO')
# Perform matching on EOEC = 0 data
eoec_0_match.out <- matchit(
trt ~ age_months + sex,
data = eoec_0_data,
method = "full",
distance = "glm",
estimand = "ATE"
)
summary(eoec_0_match.out)
eoec_0_match.out <- matchit(
trt ~ age_months + sex,
data = eoec_0_data,
method = "full",
distance = "glm",
estimand = "ATE"
)
summary(eoec_0_match.out)
eoec_0_matched.data <- match.data(eoec_0_match.out)
# Perform matching on EOEC = 1 data
eoec_1_match.out <- matchit(
trt ~ age_months + sex,
data = eoec_1_data,
method = "full",
distance = "glm",
estimand = "ATE"
)
summary(eoec_1_match.out)
eoec_1_matched.data <- match.data(eoec_1_match.out)
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=eoec_0_match.out, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- data %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=eoec_0_match.data, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- data %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
eoec_0_matched.data <- match.data(eoec_0_match.out)
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=eoec_0_matched.data, coh_mod_choice = 'logit')
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- data %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
View(eoec_0_matched.data)
# Create empty list that holds all models
list_of_fits <- list()
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=eoec_0_matched.data, coh_mod_choice = 'logit',
covariates=c("sex", "age_months"))
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- data %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
View(summary_tibble)
# Create empty list that holds all models
list_of_fits <- list()
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=eoec_0_matched.data, coh_mod_choice = 'logit',
covariates=c("sex", "age_months"))
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- eoec_0_matched.data %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
all_fits = bind_rows(list_of_fits) %>% filter(term== 'trt')
bonferroni_pvalues <- p.adjust(all_fits$p.value, method = "bonferroni")
all_fits$bonf_p.value <- bonferroni_pvalues
fdr_adjusted_pvalues <- p.adjust(all_fits$p.value, method = "fdr")
all_fits$q.value <- fdr_adjusted_pvalues
View(all_fits)
# sort the data frame by the q-value column in ascending order
top_fits_EC_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
View(eoec_0_matched.data)
View(top_fits_exp_group_logit)
View(top_fits_EC_exp_group_logit_optimal_full_match)
# Create empty list that holds all models
list_of_fits <- list()
# loop through all the outcomes in feature list
for (phenotype in unique(feature_list)) {
assoc_model <- association(phenotype, exposure="trt", data=eoec_1_matched.data, coh_mod_choice = 'logit',
covariates=c("sex", "age_months"))
summary_tibble <- tidy(assoc_model)
summary_tibble$outcome <- phenotype
print(phenotype)
sample_sizes <- eoec_1_matched.data %>%
filter(!is.na(.data[[phenotype]])) %>%
count(trt)
summary_tibble$n_ASD <- sample_sizes$n[which(sample_sizes$trt == 1)]
summary_tibble$n_control <- sample_sizes$n[which(sample_sizes$trt == 0)]
list_of_fits <- c(list_of_fits,list(summary_tibble))
}
all_fits = bind_rows(list_of_fits) %>% filter(term== 'trt')
bonferroni_pvalues <- p.adjust(all_fits$p.value, method = "bonferroni")
all_fits$bonf_p.value <- bonferroni_pvalues
fdr_adjusted_pvalues <- p.adjust(all_fits$p.value, method = "fdr")
all_fits$q.value <- fdr_adjusted_pvalues
# sort the data frame by the q-value column in ascending order
top_fits_EO_exp_group_logit_optimal_full_match <- all_fits %>% arrange(p.value) %>% head(50)
View(top_fits_EO_exp_group_logit_optimal_full_match)
# Print top_fits to a CSV file named "top_fits.csv" in the working directory
write.csv(top_fits_exp_group_logit, file = "top_fits_exp_group_logit_optimal_full_match.csv", row.names = FALSE)
View(top_fits_exp_group_logit_optimal_full_match)
View(top_fits_exp_group_logit)
